{"version":3,"sources":["Graphql/Query.js","components/Card.jsx","App.js","reportWebVitals.js","index.js"],"names":["CARS","gql","Card","useQuery","data","error","loading","useState","cars","setCars","search","setSearch","useEffect","getAllCarsList","className","type","placeholder","onChange","e","target","value","filter","val","name","toLowerCase","includes","map","src","image","onClick","window","open","zoom","model","price","id","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAEaA,EAAOC,YAAH,sI,OCqDFC,EApDF,WACX,MAAiCC,YAASH,GAAlBI,GAAxB,EAAQC,MAAR,EAAeC,QAAf,EAAwBF,MACxB,EAAwBG,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAWA,OALAC,qBAAU,WACJR,GACFK,EAAQL,EAAKS,kBAEd,CAACT,IAEF,qCACE,sBAAKU,UAAU,SAAf,UACE,8CACA,uBACEC,KAAK,OACLC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOP,EAAUO,EAAEC,OAAOC,QACpCA,MAAOV,OAIX,qBAAKI,UAAU,QAAf,SACGN,EACEa,QAAO,SAACC,GACP,MAAe,KAAXZ,GAEOY,EAAIC,KAAKC,cAAcC,SAASf,EAAOc,eADzCF,OACF,KAIRI,KAAI,SAACJ,GACJ,OACE,sBAAKR,UAAU,OAAf,UACE,qBAAKa,IAAKL,EAAIM,MAAOC,QAAS,SAACX,GAAD,OAjC/B,SAACA,GACZY,OAAOC,KAAKb,EAAEC,OAAOQ,IAAK,SAAU,wBAgCaK,CAAKd,MAC1C,sBAAKJ,UAAU,QAAf,UACE,6BAAKQ,EAAIC,OACT,0CAAaD,EAAIW,SACjB,0CAAaX,EAAIY,cALMZ,EAAIa,aC7BvCC,EAAOC,YAAK,CAAC,IAAIC,IAAS,CAAEC,IAAK,oCAEjCC,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXP,KAAMA,IAWOQ,MARf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBL,OAAQA,EAAxB,SACE,cAAC,EAAD,OCTSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5d985417.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const CARS = gql`\n  query {\n    getAllCarsList {\n      id\n      model\n      name\n      image\n      price\n    }\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { CARS } from \"../Graphql/Query\";\nconst Card = () => {\n  const { error, loading, data } = useQuery(CARS);\n  const [cars, setCars] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  const zoom = (e) => {\n    window.open(e.target.src, \"Google\", \"width=500,height=500\");\n  };\n\n  useEffect(() => {\n    if (data) {\n      setCars(data.getAllCarsList);\n    }\n  }, [data]);\n  return (\n    <>\n      <div className=\"header\">\n        <h1>cars catalog</h1>\n        <input\n          type=\"text\"\n          placeholder=\"search...\"\n          onChange={(e) => setSearch(e.target.value)}\n          value={search}\n        />\n      </div>\n\n      <div className=\"items\">\n        {cars\n          .filter((val) => {\n            if (search === \"\") {\n              return val;\n            } else if (val.name.toLowerCase().includes(search.toLowerCase())) {\n              return val;\n            }\n          })\n          .map((val) => {\n            return (\n              <div className=\"item\" key={val.id}>\n                <img src={val.image} onClick={(e) => zoom(e)} />\n                <div className=\"title\">\n                  <h3>{val.name}</h3>\n                  <h3>Model : {val.model}</h3>\n                  <h3>Price : {val.price}</h3>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default Card;\n","import {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  HttpLink,\n  from,\n} from \"@apollo/client\";\n\nimport \"./App.css\";\nimport Card from \"./components/Card\";\n\nconst link = from([new HttpLink({ uri: \"http://localhost:4000/graphql\" })]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Card />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}